parameters:
  - name: 'CUSTOMER_ID'
    type: 'string'
    default: ''

steps:
  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        resourceGroupName=$(ENVIRONMENT)-rg-$(CUSTOMER_ID)-$(AZM_LOCATION)

        echo $resourceGroupName

        echo "##vso[task.setvariable variable=resourceGroupName]$resourceGroupName"
        resourceGroupExists=$(az group exists --name $resourceGroupName)
        echo "##vso[task.setvariable variable=resourceGroupExists]$resourceGroupExists"
    displayName: 'Check if Resource Group Exists'
      
  # - task: 'AzureCLI@2'
  #   inputs:
  #     azureSubscription: "$(AZM_SERVICE_CONNECTION)"
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       set -e
  #       outboundIpAddresses="''"
  #       if [ "$resourceGroupExists" = true ]; then
  #         functionAppName=$(az functionapp list --resource-group $resourceGroupName --query "[].name" --output tsv | tail -n 1)
  #         if [ -n "$functionAppName" ]; then
  #           outboundIpAddresses=$(az webapp show --resource-group $resourceGroupName --name $functionAppName --query outboundIpAddresses --output tsv)
  #         fi
  #       fi
  #       echo "##vso[task.setvariable variable=outboundIpAddresses]$outboundIpAddresses"
  #   displayName: 'Getting Function Outbound IP Addresses'

  - task: 'AzureResourceGroupDeployment@2'
    inputs:
      location: "$(AZM_LOCATION)"
      action: 'Create Or Update Resource Group'
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      resourceGroupName: "$(resourceGroupName)"
      csmFile: 'azuredeploy.json'
      overrideParameters: "-location $(AZM_LOCATION) -environment $(ENVIRONMENT) -functionAppName $(AZM_FUNCTION_NAME) -inboundAllowedIps $(INBOUND_ALLOWED_IPS) -keyVaultName $(CUSTOMER_KEY_VAULT_NAME)"
      templateLocation: 'Linked artifact'
      deploymentMode: 'Incremental'
      deploymentOutputs: 'AZURE_DEPLOY_OUTPUTS'
    displayName: 'Update Resource Group'
    # condition: and(succeeded(), eq(variables['AZURE_DEPLOY_CACHE_HIT'], 'false'))
  
  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        echo $AZURE_DEPLOY_OUTPUTS > $(AZURE_DEPLOY_CACHE)/outputs.json
    displayName: 'Save Deployment Outputs to File'
    # condition: and(succeeded(), eq(variables['AZURE_DEPLOY_CACHE_HIT'], 'false'))

  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        outputs=$(cat $(AZURE_DEPLOY_CACHE)/outputs.json)
        echo "##vso[task.setvariable variable=OUTPUTS]$outputs"
    displayName: 'Read Outputs from file'

  - script: |
      siteName=$(echo $OUTPUTS | jq -r '.siteName.value')
      echo "##vso[task.setvariable variable=siteName]$siteName"
    displayName: 'Getting Pipeline Variables'

  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        SETTINGS=""
        for var in $(compgen -e); do
          if [[ $var == REPLACE_* ]]; then
            if [[ -z ${!var} ]]; then
              echo "Warning: $var isn't defined"
            else
              setting_name=${var#REPLACE_}
              SETTINGS+="$setting_name=${!var} "
            fi
          fi
        done
        if [[ -z $SETTINGS ]]; then
          echo "Warning: There are no environment variables to update"
        else
          az functionapp config appsettings set \
            --name "$(siteName)" \
            --resource-group "$(resourceGroupName)" \
            --settings $SETTINGS
        fi
    displayName: 'Replace Azure Function Variables'

  - task: 'AzureCLI@2'
    displayName: 'Publish Function'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        az functionapp deployment source config-zip \
          --name "$(siteName)" \
          --resource-group "$(resourceGroupName)" \
          --src "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
    retryCountOnTaskFailure: 3