stages:
  - stage: 'delivery'
    displayName: 'delivery'
    jobs:
      - job: 'delivery'
        displayName: 'delivery'
        variables:
          MIGRATIONS_CACHE: "$(Build.SourcesDirectory)/.migration"
          GOPATH: "$(Pipeline.Workspace)/.go"
          SEEDERS_CACHE: "$(Build.SourcesDirectory)/.seeder"
          AZURE_DEPLOY_CACHE: "$(Build.SourcesDirectory)/.azuredeploy"
          PIPELINE_FIREWALL_NAME: 'PipelineFirewall_$(date +"%Y%m%d%H%M%S")'
        steps:
          - task: 'Cache@2'
            inputs:
              key: "$(Agent.JobName)|$(Agent.OS)|go.sum"
              path: "$(GOPATH)"
            displayName: 'Cache for Go modules'
            continueOnError: true

          - task: 'Cache@2'
            inputs:
              key: "$(Agent.JobName)|$(ENVIRONMENT)|$(AZM_FUNCTION_NAME)|$(AZM_LOCATION)|azuredeploy.json"
              path: "$(AZURE_DEPLOY_CACHE)"
              cacheHitVar: 'AZURE_DEPLOY_CACHE_HIT'
            displayName: 'Cache for Resources Deployment in Azure'

          # TODO: this should be a share script between the vendors
          - script: |
              set -e
              INIT_SCRIPT="config.sh"
              [[ -f $INIT_SCRIPT ]] && . ./$INIT_SCRIPT || echo "The '$INIT_SCRIPT' file was not found, skipping..."
            displayName: 'Load Custom Configuration'

          - task: 'GoTool@0'
            inputs:
              version: '1.23.3'
              architecture: 'amd64'
              goArguments: 'mod tidy'

          - script: |
              set -e

              mkdir -p $(MIGRATIONS_CACHE)
              mkdir -p $(SEEDERS_CACHE)
              mkdir -p $(AZURE_DEPLOY_CACHE)
            displayName: 'Setup Cache'

          - script: |
              set -e

              export CGO_ENABLED=0
              export BUILD_FLAGS="-ldflags='-w -s'"
              mkdir ./bin && go build -o ./bin -v ./...
            displayName: 'Build Go Project'

          - task: 'CopyFiles@2'
            inputs:
              Contents: |
                api*/function.json
                bin/*
                host.json
              TargetFolder: "$(Build.SourcesDirectory)/$(Build.BuildId)"
            displayName: 'Copy App Files'

          - task: 'ArchiveFiles@2'
            inputs:
              archiveType: 'zip'
              rootFolderOrFile: "$(Build.SourcesDirectory)/$(Build.BuildId)"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              includeRootFolder: false
              replaceExistingArchive: true
            displayName: 'Archive Build Output'

        deployment:
          - ${{ if eq(variables.APP_TYPE, 'distributed') }}:
              - template: '../../../global/stages/50-deployment/distributed.yaml'
                parameters:
                  CUSTOMER_ID: '$(CUSTOMER_ID)'

          - ${{ if eq(variables.APP_TYPE, 'central') }}:
              - template: '../../../global/stages/50-deployment/central.yaml'

      #     - task: 'AzureCLI@2'
      #       inputs:
      #         azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      #         scriptType: 'bash'
      #         scriptLocation: 'inlineScript'
      #         inlineScript: |
      #           set -e

      #           echo $AZURE_DEPLOY_OUTPUTS > $(AZURE_DEPLOY_CACHE)/outputs.json
      #       displayName: 'Save Deployment Outputs to File'
      #       condition: and(succeeded(), eq(variables['AZURE_DEPLOY_CACHE_HIT'], 'false'))

      #     - task: 'AzureCLI@2'
      #       inputs:
      #         azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      #         scriptType: 'bash'
      #         scriptLocation: 'inlineScript'
      #         inlineScript: |
      #           set -e

      #           outputs=$(cat $(AZURE_DEPLOY_CACHE)/outputs.json)
      #           echo "##vso[task.setvariable variable=OUTPUTS]$outputs"
      #       displayName: 'Read Outputs from file'

      #     - script: |
      #         siteName=$(echo $OUTPUTS | jq -r '.siteName.value')
      #         echo "##vso[task.setvariable variable=siteName]$siteName"
      #       displayName: 'Getting Pipeline Variables'

      #     - task: 'AzureCLI@2'
      #       inputs:
      #         azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      #         scriptType: 'bash'
      #         scriptLocation: 'inlineScript'
      #         inlineScript: |
      #           set -e

      #           SETTINGS=""

      #           for var in $(compgen -e); do
      #             if [[ $var == REPLACE_* ]]; then
      #               if [[ -z ${!var} ]]; then
      #                 echo "Warning: $var isn't defined"
      #               else
      #                 setting_name=${var#REPLACE_}
      #                 SETTINGS+="$setting_name=${!var} "
      #               fi
      #             fi
      #           done

      #           if [[ -z $SETTINGS ]]; then
      #             echo "Warning: There are no environment variables to update"
      #           else
      #             az functionapp config appsettings set \
      #               --name "$(siteName)" \
      #               --resource-group "$(resourceGroupName)" \
      #               --settings $SETTINGS
      #           fi
      #       displayName: 'Replace Azure Function Variables'

      #     - task: 'AzureCLI@2'
      #       displayName: 'Publish Function'
      #       inputs:
      #         azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      #         scriptType: 'bash'
      #         scriptLocation: 'inlineScript'
      #         inlineScript: |
      #           set -e

      #           az functionapp deployment source config-zip \
      #             --name "$(siteName)" \
      #             --resource-group "$(resourceGroupName)" \
      #             --src "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
      #       retryCountOnTaskFailure: 3

      # - template: '../../../global/stages/40-delivery/release.yaml'
