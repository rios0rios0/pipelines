stages:
  - stage: 'delivery'
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/main'))
    displayName: 'delivery'
    jobs:
      - job: 'delivery'
        displayName: 'delivery'
        steps:
          # TODO: could we consider the use of Makefile?
          - task: 'GoTool@0'
            inputs:
              version: '1.20'
              architecture: 'amd64'
              goArguments: 'mod tidy'
          # TODO: this should be a share script between the vendors
          - script: |
              export INIT_SCRIPT="config.sh"
              [[ -f $INIT_SCRIPT ]] && ./$INIT_SCRIPT || echo "The '$INIT_SCRIPT' file is not found, skipping..."
          - script: mkdir -p bin
          - script: |
              export CGO_ENABLED=0
              export BUILD_FLAGS="-ldflags='-w -s'"
              go build -o ./bin -v ./...
          - task: 'CopyFiles@2'
            inputs:
              Contents: |
                api/function.json
                bin/main
                host.json
              TargetFolder: '$(Build.SourcesDirectory)/$(Build.BuildId)'
          - task: 'ArchiveFiles@2'
            inputs:
              archiveType: 'zip'
              rootFolderOrFile: '$(Build.SourcesDirectory)/$(Build.BuildId)'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              includeRootFolder: false
              replaceExistingArchive: true
          # TODO: this should be the deployment stage
          - task: 'AzureResourceGroupDeployment@2'
            inputs:
              location: '$(AZM_LOCATION)'
              action: 'Create Or Update Resource Group'
              azureSubscription: '$(AZM_SERVICE_CONNECTION)'
              resourceGroupName: '$(ENVIRONMENT)-rg-$(AZM_FUNCTION_NAME)-$(AZM_LOCATION)'
              csmFile: 'azuredeploy.json'
              overrideParameters: '-location $(AZM_LOCATION) -environment $(ENVIRONMENT) -functionAppName $(AZM_FUNCTION_NAME) -inboundAllowedIps $(INBOUND_ALLOWED_IPS)'
              templateLocation: 'Linked artifact'
              deploymentMode: 'Incremental'
              deploymentOutputs: 'OUTPUTS'
          - task: AzureCLI@2
            displayName: Replace Azure Function Variables
            inputs:
              azureSubscription: '$(AZM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                RESOURCE_GROUP_NAME=$(ENVIRONMENT)-rg-$(AZM_FUNCTION_NAME)-$(AZM_LOCATION)
                FUNCTION_NAME=$(OUTPUTS.siteName.value)

                SETTINGS=""

                for var in $(compgen -e); do
                  if [[ $var == REPLACE_* ]]; then
                    if [[ -z ${!var} ]]; then
                      echo "Warning: $var isn't defined"
                    else
                      setting_name=${var#REPLACE_}
                      SETTINGS+="$setting_name=${!var} "
                    fi
                  fi
                done

                if [[ -z $SETTINGS ]]; then
                  echo "Warning: There are no environment variables to update"
                else
                  pip install -Iv azure-cli==2.56.0 --extra-index-url https://azurecliprod.blob.core.windows.net/edge
                  az --version
                  az functionapp config appsettings set \
                    --name "$FUNCTION_NAME" \
                    --resource-group "$RESOURCE_GROUP_NAME" \
                    --settings "$SETTINGS"
                fi
          - task: AzureCLI@2
            displayName: Migrations
            inputs:
              azureSubscription: '$(AZM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # TODO: move this "IF" to a file and (or) use an Azure resource to create a condition
                if grep -r 'goose' db/migrations/*.sql; then
                  PIPELINE_IP=$(curl -s ifconfig.me/ip)
                  PIPELINE_FIREWALL_NAME="PipelineFirewall_$(date +"%Y%m%d%H%M%S")"
                  RESOURCE_GROUP_NAME=$(ENVIRONMENT)-rg-$(AZM_FUNCTION_NAME)-$(AZM_LOCATION)
                  DATABASE_SERVER_NAME=$(OUTPUTS.databaseServername.value)

                # TODO: create firewall for others databases
                # TODO: this command is here because, without it, the code wasn't authorized, need to investigate the reason
                  az --version
                  az postgres flexible-server firewall-rule create \
                    --resource-group "$RESOURCE_GROUP_NAME" \
                    --name "$DATABASE_SERVER_NAME" \
                    --rule-name "$PIPELINE_FIREWALL_NAME" \
                    --start-ip-address "$PIPELINE_IP"

                  go install github.com/pressly/goose/v3/cmd/goose@v3.17.0

                  PORT=$(OUTPUTS.databaseServerPort.value)
                  HOST=$(OUTPUTS.databaseServerHost.value)
                  USER=$(OUTPUTS.databaseServerUsername.value)
                  PASSWORD=$(OUTPUTS.databaseServerPassword.value)
                  DBNAME=$(OUTPUTS.databaseName.value)
                  SSL=$(OUTPUTS.databaseServerSSL.value)
                  CONNECTION_STRING="host=$HOST port=$PORT user=$USER password=$PASSWORD dbname=$DBNAME sslmode=$SSL"

                  $(go env GOPATH)/bin/goose -dir db/migrations postgres "$CONNECTION_STRING" up

                else
                  echo "No Goose migration files found. Skipping Goose installation and migration."
                fi

                if grep -r 'goose' db/seeders/*.sql; then
                  for dir in "" "dev" "prod"; do
                      if [ -z "$dir" ] || [ "$ENVIRONMENT" == "$dir" ]; then
                        dir_path="db/seeders/$dir"
                        dir_path=${dir_path%/}
                        if grep -q 'goose' $dir_path/*.sql; then
                          $(go env GOPATH)/bin/goose -dir $dir_path postgres "$CONNECTION_STRING" up
                        fi
                      fi
                  done
                else
                    echo "No Goose seed files found. Skipping seed"
                fi

                az postgres flexible-server firewall-rule delete --yes \
                  --resource-group "$RESOURCE_GROUP_NAME" \
                  --name "$DATABASE_SERVER_NAME" \
                  --rule-name "$PIPELINE_FIREWALL_NAME"

          - script: |
              siteName=$(echo $(OUTPUTS.siteName.value) | tr -d '"')
              echo "##vso[task.setvariable variable=siteName]$siteName"
            displayName: 'Getting siteName Variable'
          - task: 'AzureFunctionApp@1'
            inputs:
              appName: '$(siteName)'
              appType: 'functionAppLinux'
              azureSubscription: '$(AZM_SERVICE_CONNECTION)'
              package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              deployMethod: 'zipDeploy'
      - template: '../../../global/stages/40-delivery/release.yaml'
