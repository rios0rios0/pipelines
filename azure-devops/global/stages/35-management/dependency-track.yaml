parameters:
  - name: 'BEFORE_SCRIPT'
    type: 'string'
    default: ''
  - name: 'UUID_FOLDER'
    type: 'string'
    default: '35-management/dependency-track'

steps:
  - script: ${{ parameters.BEFORE_SCRIPT }}

  # keep in mind you need STORAGE_ACCOUNT_NAME, STORAGE_CONTAINER_NAME, STORAGE_ACCOUNT_KEY environment variables
  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        if [ ! -z "$STORAGE_ACCOUNT_NAME" ]; then
          mkdir -p $(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}
          az storage blob download \
            --account-name $(STORAGE_ACCOUNT_NAME) \
            --container-name $(STORAGE_CONTAINER_NAME) \
            --name ${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt \
            --file $(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt \
            --account-key $(STORAGE_ACCOUNT_KEY)
        else
          echo "STORAGE_ACCOUNT_NAME environment variable not found. Skipping download."
        fi
    displayName: 'Download Project UUID'
    continueOnError: true

  - script: |
      set -e

      if [ -f "$(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt" ]; then
        export UUID=$(cat $(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt)
        export REQUEST_CONTENT_TYPE="Content-Type: multipart/form-data"
        export REQUEST_API_KEY="X-Api-Key: $(DEPENDENCY_TRACK_TOKEN)"
        curl --insecure --fail --request 'POST' "$(DEPENDENCY_TRACK_HOST_URL)/api/v1/bom" \
          -H "$REQUEST_CONTENT_TYPE" -H "$REQUEST_API_KEY" \
          -F "project=$UUID" \
          -F "projectVersion=$(cat $PREFIX$REPORT_PATH/bom.json | jq -r '.metadata.component.version')" \
          -F "bom=@$PREFIX$REPORT_PATH/bom.json"
      else
        echo "UUID artifact not found. Creating a new project."
      fi
    displayName: 'Upload BOM with existing UUID'

  - script: |
      set -e

      if [ ! -f "$(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt" ]; then
        export REQUEST_CONTENT_TYPE="Content-Type: multipart/form-data"
        export REQUEST_API_KEY="X-Api-Key: $(DEPENDENCY_TRACK_TOKEN)"
        RESPONSE=$(curl --insecure --fail --request 'POST' "$(DEPENDENCY_TRACK_HOST_URL)/api/v1/bom" \
          -H "$REQUEST_CONTENT_TYPE" -H "$REQUEST_API_KEY" \
          -F "projectName=$(cat $PREFIX$REPORT_PATH/bom.json | jq -r '.metadata.component.name')" \
          -F "projectVersion=$(cat $PREFIX$REPORT_PATH/bom.json | jq -r '.metadata.component.version')" \
          -F 'autoCreate=true' -F "bom=@$PREFIX$REPORT_PATH/bom.json")
        UUID=$(echo $RESPONSE | jq -r '.token')
        mkdir -p $(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}
        echo $UUID > $(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt
      fi
    displayName: 'Create new project and upload BOM'

  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        if [ ! -z "$STORAGE_ACCOUNT_NAME" ]; then
          az storage blob upload \
            --account-name $(STORAGE_ACCOUNT_NAME) \
            --container-name $(STORAGE_CONTAINER_NAME) \
            --name ${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt \
            --file $(Pipeline.Workspace)/${{ parameters.UUID_FOLDER }}/$(Build.DefinitionName).txt \
            --account-key $(STORAGE_ACCOUNT_KEY)
        else
          echo "STORAGE_ACCOUNT_NAME environment variable not found. Skipping upload."
        fi
    displayName: 'Publish Project UUID'
