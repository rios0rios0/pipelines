parameters:
  - name: 'RESOURCE_GROUP_NAME'
    type: 'string'
  - name: 'ENVIRONMENT'
    type: 'string'
  - name: 'AZM_SERVICE_CONNECTION'
    type: 'string'

steps:
  - task: 'AzureCLI@2'
    displayName: 'Check if Database Exists'
    name: 'CheckDatabase'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        DATABASE_SERVER_NAME=$(echo $OUTPUTS | jq -r '.databaseServerName.value')

        if [[ -z "$DATABASE_SERVER_NAME" || "$DATABASE_SERVER_NAME" == "null" ]]; then
          echo "$(date "+%Y-%m-%d %H:%M:%S") - Invalid Database Server Name: $DATABASE_SERVER_NAME."
          echo "##vso[task.setvariable variable=DB_EXISTS;isOutput=true]false"
          exit 0
        fi
        dbExists=$(az postgres flexible-server show --resource-group "$(resourceGroupName)" --name "$DATABASE_SERVER_NAME" --query "name" --output tsv 2>/dev/null || echo "null")
        if [[ "$dbExists" != "null" ]]; then
          echo "##vso[task.setvariable variable=DB_EXISTS;isOutput=true]true"
        else
          echo "##vso[task.setvariable variable=DB_EXISTS;isOutput=true]false"
        fi

  - task: 'AzureCLI@2'
    displayName: 'Create Flexible Firewall Rule to execute migrations and seeders'
    condition: and(succeeded(), eq(variables['CheckDatabase.DB_EXISTS'], 'true'))
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        pipelineFirewallName="PipelineFirewall_$(date +"%Y%m%d%H%M%S")"

        echo "##vso[task.setvariable variable=pipelineFirewallName]$pipelineFirewallName"

        PIPELINE_IP=$(curl -s ifconfig.me/ip)
        DATABASE_SERVER_NAME=$(echo $OUTPUTS | jq -r '.databaseServerName.value')

        az postgres flexible-server firewall-rule create \
            --resource-group "$(resourceGroupName)" \
            --name "$DATABASE_SERVER_NAME" \
            --rule-name "$pipelineFirewallName" \
            --start-ip-address "$PIPELINE_IP"
  - script: |
      set -e

      PORT=$(echo $OUTPUTS | jq -r '.databaseServerPort.value')
      HOST=$(echo $OUTPUTS | jq -r '.databaseServerHost.value')
      USER=$(echo $OUTPUTS | jq -r '.databaseServerUsername.value')
      PASSWORD=$(echo $OUTPUTS | jq -r '.databaseServerPassword.value')
      DBNAME=$(echo $OUTPUTS | jq -r '.databaseName.value')
      SSL=$(echo $OUTPUTS | jq -r '.databaseServerSSL.value')
      CONNECTION_STRING="host=$HOST port=$PORT user=$USER password=$PASSWORD dbname=$DBNAME sslmode=$SSL"
      echo "##vso[task.setvariable variable=CONNECTION_STRING]$CONNECTION_STRING"
    displayName: 'Set Database Connection String'
    condition: and(succeeded(), eq(variables['CheckDatabase.DB_EXISTS'], 'true'))
  - script: |
      set -e

      table_hash=$(psql "$(CONNECTION_STRING)" -t -c \
      "SELECT md5(string_agg(concat_ws('|', version_id::text, is_applied::text), ',' ORDER BY id)) AS table_hash FROM goose_db_version;")
      table_hash=$(echo "$table_hash" | xargs)
      echo "$(date "+%Y-%m-%d %H:%M:%S") - Queried Table Hash: $table_hash."
      echo "##vso[task.setvariable variable=GOOSE_TABLE_HASH]$table_hash"
    displayName: 'Set Goose Table Hash variable'
    condition: and(succeeded(), eq(variables['CheckDatabase.DB_EXISTS'], 'true'))
    continueOnError: true

  - script: |
      set -e

      GOOSE_VERSION=v3.24.0
      mkdir -p goose
      curl -o goose/go.sum "https://raw.githubusercontent.com/pressly/goose/refs/tags/$GOOSE_VERSION/go.sum"
      echo "##vso[task.setvariable variable=GOOSE_VERSION]$GOOSE_VERSION"
      GOOSE_GOPATH=$(go env GOPATH)
      echo "##vso[task.setvariable variable=GOOSE_GOPATH]$GOOSE_GOPATH"
    displayName: 'Set goose version and go.sum'
  - task: 'Cache@2'
    displayName: 'Cache for Goose modules'
    inputs:
      key: "$(Agent.JobName)|goose/go.sum"
      path: "$(GOOSE_GOPATH)"
    continueOnError: true

  - task: 'Cache@2'
    displayName: 'Cache for Migrations'
    condition: and(succeeded(), eq(variables['CheckDatabase.DB_EXISTS'], 'true'))
    inputs:
      key: "$(Agent.JobName)|$(ENVIRONMENT)|$(GOOSE_TABLE_HASH)|db/migrations/**/*.sql"
      path: "db/migrations"
      cacheHitVar: 'MIGRATIONS_CACHE_HIT'
    continueOnError: true

  - task: 'Cache@2'
    displayName: 'Cache for Seeders'
    condition: and(succeeded(), eq(variables['CheckDatabase.DB_EXISTS'], 'true'))
    inputs:
      key: "$(Agent.JobName)|$(ENVIRONMENT)|$(GOOSE_TABLE_HASH)|db/seeders/**/*.sql"
      path: "db/seeders"
      cacheHitVar: 'SEEDERS_CACHE_HIT'
    continueOnError: true

  - task: 'AzureCLI@2'
    inputs:
      condition: and(succeeded(), eq(variables['MIGRATIONS_CACHE_HIT'], 'false'))
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        if [[ "$MIGRATIONS_CACHE_HIT" == "false" ]]; then
          # TODO: move this "IF" to a file and (or) use an Azure resource to create a condition
          if grep -r 'goose' db/migrations --include="*.sql"; then
            go install github.com/pressly/goose/v3/cmd/goose@$GOOSE_VERSION
            $(go env GOPATH)/bin/goose -dir db/migrations postgres "$(CONNECTION_STRING)" up
          else
            echo "$(date "+%Y-%m-%d %H:%M:%S") - No Goose migration files found. Skipping Goose installation and migration."
          fi
        else
          echo "$(date "+%Y-%m-%d %H:%M:%S") - No changes on migration files. Skipping Goose installation and migration."
        fi
    displayName: 'Execute Migrations'

  - task: 'AzureCLI@2'
    inputs:
      condition: and(succeeded(), eq(variables['SEEDERS_CACHE_HIT'], 'false'))
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        if [[ "$SEEDERS_CACHE_HIT" == "false" ]]; then
          if grep -r 'goose' db/seeders --include="*.sql"; then
            go install github.com/pressly/goose/v3/cmd/goose@$GOOSE_VERSION
            for dir in "" "dev" "prod"; do
                if [ -z "$dir" ] || [ "$ENVIRONMENT" == "$dir" ]; then
                  dir_path="db/seeders/$dir"
                  dir_path=${dir_path%/}
                  if grep -q 'goose' $dir_path/*.sql; then
                      $(go env GOPATH)/bin/goose -dir $dir_path postgres "$(CONNECTION_STRING)" up
                  fi
                fi
            done
          else
              echo "$(date "+%Y-%m-%d %H:%M:%S") - No Goose seed files found. Skipping seed!"
          fi
        else
            echo "$(date "+%Y-%m-%d %H:%M:%S") - No changes on seed files found. Skipping seed!"
        fi
    displayName: 'Execute Seeders'

  - task: 'AzureCLI@2'
    displayName: 'Delete Flexible Firewall Rule to execute migrations and seeders'
    condition: and(succeeded(), eq(variables['CheckDatabase.DB_EXISTS'], 'true'))
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        DATABASE_SERVER_NAME=$(echo $OUTPUTS | jq -r '.databaseServerName.value')

        az postgres flexible-server firewall-rule delete --yes \
          --resource-group "$(resourceGroupName)" \
          --name "$DATABASE_SERVER_NAME" \
          --rule-name "$(pipelineFirewallName)"
