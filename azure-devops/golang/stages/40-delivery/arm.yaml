stages:
  - stage: 'delivery'
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/main'))
    displayName: 'delivery'
    jobs:
      - job: 'delivery'
        displayName: 'delivery'
        variables:
          GOPATH: "$(Build.SourcesDirectory)/.go"
          MIGRATIONS_CACHE: "$(Build.SourcesDirectory)/.migration"
          SEEDERS_CACHE: "$(Build.SourcesDirectory)/.seeder"
          AZURE_DEPLOY_CACHE: "$(Build.SourcesDirectory)/.azuredeploy"
          PIPELINE_FIREWALL_NAME: 'PipelineFirewall_$(date +"%Y%m%d%H%M%S")'
        steps:
          # TODO: check if this is necessary
          - script: |
              set -e

              mkdir -p $(MIGRATIONS_CACHE)
              mkdir -p $(SEEDERS_CACHE)
              mkdir -p $(AZURE_DEPLOY_CACHE)
            displayName: 'Setup Cache'

          - task: 'Cache@2'
            inputs:
              key: "go-$(Agent.OS)|go.sum"
              path: "$(GOPATH)"
            displayName: 'Cache Go Modules'

          - task: 'CacheBeta@1'
            inputs:
              key: 'go-migrations|db/migrations/*.sql'
              path: "$(MIGRATIONS_CACHE)"
              cacheHitVar: 'MIGRATIONS_CACHE_HIT'
            displayName: 'Cache Migrations'
            continueOnError: true

          - task: 'CacheBeta@1'
            inputs:
              key: 'go-migrations|db/seeders/*.sql'
              path: "$(SEEDERS_CACHE)"
              cacheHitVar: 'SEEDERS_CACHE_HIT'
            displayName: 'Cache Seeders'
            continueOnError: true

          - task: 'Cache@2'
            inputs:
              key: 'azure-deploy|azuredeploy.json'
              path: "$(AZURE_DEPLOY_CACHE)"
              cacheHitVar: 'AZURE_DEPLOY_CACHE_HIT'
            displayName: 'Cache Azure Deploy'

          - task: 'GoTool@0'
            inputs:
              version: '1.23.1'
              architecture: 'amd64'
              goArguments: 'mod tidy'
            displayName: 'Go Module Dependency Cleanup'

          # TODO: this should be a share script between the vendors
          - script: |
              set -e
              INIT_SCRIPT="config.sh"
              [[ -f $INIT_SCRIPT ]] && . ./$INIT_SCRIPT || echo "The '$INIT_SCRIPT' file is not found, skipping..."
            displayName: 'Load Config'

          - script: |
              set -e

              export CGO_ENABLED=0
              export BUILD_FLAGS="-ldflags='-w -s'"
              mkdir ./bin && go build -o ./bin -v ./...
            displayName: 'Build Go Project'

          - task: 'CopyFiles@2'
            inputs:
              Contents: |
                api/function.json
                bin/*
                host.json
              TargetFolder: "$(Build.SourcesDirectory)/$(Build.BuildId)"
            displayName: 'Copy App Files'

          - task: 'ArchiveFiles@2'
            inputs:
              archiveType: 'zip'
              rootFolderOrFile: "$(Build.SourcesDirectory)/$(Build.BuildId)"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              includeRootFolder: false
              replaceExistingArchive: true
            displayName: 'Archive Build Output'

          - task: 'AzureCLI@2'
            displayName: 'Getting Function Outbound IP Addresses'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                resourceGroupName=$(ENVIRONMENT)-rg-$(AZM_FUNCTION_NAME)-$(AZM_LOCATION)
                echo "##vso[task.setvariable variable=resourceGroupName]$resourceGroupName"
                functionAppName=$(az functionapp list --resource-group $resourceGroupName --query "[].name" --output tsv | tail -n 1)

                outboundIpAddresses=$(az webapp show --resource-group $resourceGroupName --name $functionAppName --query outboundIpAddresses --output tsv)
                echo "##vso[task.setvariable variable=outboundIpAddresses]$outboundIpAddresses"

          # TODO: this should be the deployment stage
          - task: 'AzureResourceGroupDeployment@2'
            condition: and(succeeded(), eq(variables['AZURE_DEPLOY_CACHE_HIT'], 'false'))
            inputs:
              location: "$(AZM_LOCATION)"
              action: 'Create Or Update Resource Group'
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              resourceGroupName: "$(resourceGroupName)"
              csmFile: 'azuredeploy.json'
              overrideParameters: "-location $(AZM_LOCATION) -environment $(ENVIRONMENT) -functionAppName $(AZM_FUNCTION_NAME) -inboundAllowedIps $(INBOUND_ALLOWED_IPS) -oldOutboundIpAddresses $(outboundIpAddresses)"
              templateLocation: 'Linked artifact'
              deploymentMode: Incremental
              deploymentOutputs: 'AZURE_DEPLOY_OUTPUTS'
            displayName: 'Deploy Resource Group'

          - task: 'AzureCLI@2'
            displayName: 'Save Deployment Outputs to File'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                echo $AZURE_DEPLOY_OUTPUTS > $(AZURE_DEPLOY_CACHE)/outputs.json
            condition: and(succeeded(), eq(variables['AZURE_DEPLOY_CACHE_HIT'], 'false'))

          - task: 'AzureCLI@2'
            displayName: 'Read Outputs from file'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                outputs=$(cat $(AZURE_DEPLOY_CACHE)/outputs.json)
                echo "##vso[task.setvariable variable=OUTPUTS]$outputs"

          - script: |
              siteName=$(echo $OUTPUTS | jq -r '.siteName.value')
              echo "##vso[task.setvariable variable=siteName]$siteName"
            displayName: 'Getting Pipeline Variables'

          - task: 'AzureCLI@2'
            displayName: 'Replace Azure Function Variables'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                SETTINGS=""

                for var in $(compgen -e); do
                  if [[ $var == REPLACE_* ]]; then
                    if [[ -z ${!var} ]]; then
                      echo "Warning: $var isn't defined"
                    else
                      setting_name=${var#REPLACE_}
                      SETTINGS+="$setting_name=${!var} "
                    fi
                  fi
                done

                if [[ -z $SETTINGS ]]; then
                  echo "Warning: There are no environment variables to update"
                else
                  az functionapp config appsettings set \
                    --name "$(siteName)" \
                    --resource-group "$(resourceGroupName)" \
                    --settings $SETTINGS
                fi

          - task: 'AzureCLI@2'
            condition: and(succeeded(), or(eq(variables['MIGRATIONS_CACHE_HIT'], 'false'), eq(variables['SEEDERS_CACHE_HIT'], 'false')))
            displayName: 'Create Flexible Firewall Rule to execute migrations and seeders'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                DATABASE_SERVER_NAME=$(echo $OUTPUTS | jq -r '.databaseServerName.value')
                PIPELINE_IP=$(curl -s ifconfig.me/ip)

                az postgres flexible-server firewall-rule create \
                    --resource-group "$(resourceGroupName)" \
                    --name "$DATABASE_SERVER_NAME" \
                    --rule-name "$(PIPELINE_FIREWALL_NAME)" \
                    --start-ip-address "$PIPELINE_IP"

          - task: 'AzureCLI@2'
            condition: and(succeeded(), eq(variables['MIGRATIONS_CACHE_HIT'], 'false'))
            displayName: 'Execute Migrations'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                # TODO: move this "IF" to a file and (or) use an Azure resource to create a condition
                if grep -r 'goose' db/migrations/*.sql; then
                  PORT=$(echo $OUTPUTS | jq -r '.databaseServerPort.value')
                  HOST=$(echo $OUTPUTS | jq -r '.databaseServerHost.value')
                  USER=$(echo $OUTPUTS | jq -r '.databaseServerUsername.value')
                  PASSWORD=$(echo $OUTPUTS | jq -r '.databaseServerPassword.value')
                  DBNAME=$(echo $OUTPUTS | jq -r '.databaseName.value')
                  SSL=$(echo $OUTPUTS | jq -r '.databaseServerSSL.value')
                  CONNECTION_STRING="host=$HOST port=$PORT user=$USER password=$PASSWORD dbname=$DBNAME sslmode=$SSL"

                  go install github.com/pressly/goose/v3/cmd/goose@v3.17.0

                  $(go env GOPATH)/bin/goose -dir db/migrations postgres "$CONNECTION_STRING" up

                else
                  echo "No Goose migration files found. Skipping Goose installation and migration."
                fi

          - task: 'AzureCLI@2'
            condition: and(succeeded(), eq(variables['SEEDERS_CACHE_HIT'], 'false'))
            displayName: 'Execute Seeders'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                if grep -r 'goose' db/seeders/*.sql; then
                  PORT=$(echo $OUTPUTS | jq -r '.databaseServerPort.value')
                  HOST=$(echo $OUTPUTS | jq -r '.databaseServerHost.value')
                  USER=$(echo $OUTPUTS | jq -r '.databaseServerUsername.value')
                  PASSWORD=$(echo $OUTPUTS | jq -r '.databaseServerPassword.value')
                  DBNAME=$(echo $OUTPUTS | jq -r '.databaseName.value')
                  SSL=$(echo $OUTPUTS | jq -r '.databaseServerSSL.value')

                  CONNECTION_STRING="host=$HOST port=$PORT user=$USER password=$PASSWORD dbname=$DBNAME sslmode=$SSL"

                  go install github.com/pressly/goose/v3/cmd/goose@v3.17.0

                  for dir in "" "dev" "prod"; do
                      if [ -z "$dir" ] || [ "$ENVIRONMENT" == "$dir" ]; then
                        dir_path="db/seeders/$dir"
                        dir_path=${dir_path%/}
                        if grep -q 'goose' $dir_path/*.sql; then
                          $(go env GOPATH)/bin/goose -dir $dir_path postgres "$CONNECTION_STRING" up
                        fi
                      fi
                  done
                else
                    echo "No Goose seed files found. Skipping seed"
                fi

          - task: 'AzureCLI@2'
            condition: and(succeeded(), or(eq(variables['MIGRATIONS_CACHE_HIT'], 'false'), eq(variables['SEEDERS_CACHE_HIT'], 'false')))
            displayName: 'Delete Flexible Firewall Rule to execute migrations and seeders'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                DATABASE_SERVER_NAME=$(echo $OUTPUTS | jq -r '.databaseServerName.value')
                PIPELINE_IP=$(curl -s ifconfig.me/ip)

                az postgres flexible-server firewall-rule delete --yes \
                  --resource-group "$(resourceGroupName)" \
                  --name "$DATABASE_SERVER_NAME" \
                  --rule-name "$(PIPELINE_FIREWALL_NAME)"

          - task: 'AzureCLI@2'
            displayName: 'Publish Function'
            inputs:
              azureSubscription: "$(AZM_SERVICE_CONNECTION)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                az functionapp deployment source config-zip \
                  --name "$(siteName)" \
                  --resource-group "$(resourceGroupName)" \
                  --src "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
            retryCountOnTaskFailure: 3

      - template: '../../../global/stages/40-delivery/release.yaml'
