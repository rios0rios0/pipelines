parameters:
  - name: 'PIPELINE_FIREWALL_NAME'
    type: 'string'
  - name: 'RESOURCE_GROUP_NAME'
    type: 'string'
  - name: 'ENVIRONMENT'
    type: 'string'
  - name: 'AZM_SERVICE_CONNECTION'
    type: 'string'

steps:
  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        mkdir -p $(AZURE_DEPLOY_CACHE)

        echo $AZURE_DEPLOY_OUTPUTS > $(AZURE_DEPLOY_CACHE)/outputs.json

        # Check if the file was created
        if [ -f "$(AZURE_DEPLOY_CACHE)/outputs.json" ]; then
          echo "File outputs.json created with success."
        else
          echo "Erro: File outputs.json file not found."
          exit 1
        fi
    displayName: 'Save Deployment Outputs to File'

  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        outputs=$(cat $(AZURE_DEPLOY_CACHE)/outputs.json)
        echo "##vso[task.setvariable variable=OUTPUTS]$outputs"
    displayName: 'Read Outputs from file'

  - template: './database.yaml'
    parameters:
      PIPELINE_FIREWALL_NAME: "$(PIPELINE_FIREWALL_NAME)"
      RESOURCE_GROUP_NAME: "$(resourceGroupName)"
      ENVIRONMENT: "$(ENVIRONMENT)"
      AZM_SERVICE_CONNECTION: "$(AZM_SERVICE_CONNECTION)"

  - script: |

      siteName=$(echo $OUTPUTS | jq -r '.siteName.value')
      echo "##vso[task.setvariable variable=siteName]$siteName"
    displayName: 'Getting Pipeline Variables'
  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        SETTINGS=""
        for var in $(compgen -e); do
          if [[ $var == REPLACE_* ]]; then
            if [[ -z ${!var} ]]; then
              echo "Warning: $var isn't defined"
            else
              setting_name=${var#REPLACE_}
              SETTINGS+="$setting_name=${!var} "
            fi
          fi
        done
        if [[ -z $SETTINGS ]]; then
          echo "Warning: There are no environment variables to update"
        else
          az functionapp config appsettings set \
            --name "$(siteName)" \
            --resource-group "$(resourceGroupName)" \
            --settings $SETTINGS
        fi
    displayName: 'Replace Azure Function Variables'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'build-output'
      targetPath: '$(Pipeline.Workspace)/build-output'
    displayName: 'Download Build Artifact'

  - task: 'AzureCLI@2'
    inputs:
      azureSubscription: "$(AZM_SERVICE_CONNECTION)"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e
        az functionapp deployment source config-zip \
          --name "$(siteName)" \
          --resource-group "$(resourceGroupName)" \
          --src "$(Pipeline.Workspace)/build-output/$(Build.BuildId).zip"
    displayName: 'Publish Function'
    retryCountOnTaskFailure: 3
