stages:
  - stage: 'deployment'
    displayName: 'deployment'
    condition: and(not(failed()), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/')))
    dependsOn: 'delivery'
    variables:
      dockerContainerTag: $[stageDependencies.delivery.delivery.outputs['build.DOCKER_CONTAINER_TAG']]
    jobs:
      - job: 'deployment'
        displayName: 'deployment'
        steps:
          - task: 'KubernetesManifest@0'
            inputs:
              action: 'createSecret'
              secretType: 'dockerRegistry'
              secretName: "$(K8S_IMAGE_PULL_SECRET_NAME)"
              dockerRegistryEndpoint: "$(CONTAINER_REGISTRY_SERVICE_CONNECTION)"
              kubernetesServiceConnection: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"

          - template: '../../abstracts/replace-environment-variables.yaml'
            parameters:
              FILE: '.ci/40-delivery/config/opensearch_dashboards.yml'
              DISPLAY_NAME: 'Replace Environment Variables'

          - task: 'Kubernetes@1'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              configMapName: "$(K8S_CONFIGMAP_NAME)"
              forceUpdateConfigMap: true
              configMapArguments: '--from-file=.ci/40-delivery/config/opensearch_dashboards.yml'
              kubernetesServiceEndpoint: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"

          - task: 'KubernetesManifest@0'
            inputs:
              action: 'patch'
              kind: 'deployment'
              name: "$(K8S_DEPLOYMENT_NAME)"
              mergeStrategy: 'strategic'
              patch: |
                {
                  "spec": {
                    "template": {
                      "spec": {
                        "imagePullSecrets": [
                          {
                            "name": "$(K8S_IMAGE_PULL_SECRET_NAME)"
                          }
                        ],
                        "volumes": [
                          {
                            "name": "$(K8S_DEPLOYMENT_NAME)",
                            "configMap": {
                              "name": "$(K8S_CONFIGMAP_NAME)"
                            }
                          }
                        ],
                        "containers": [
                          {
                            "name": "$(K8S_CONTAINER_NAME)",
                            "volumeMounts": [
                              {
                                "name": "$(K8S_DEPLOYMENT_NAME)",
                                "mountPath": "/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml",
                                "subPath": "opensearch_dashboards.yml"
                              }
                            ],
                            "image": "$(DOCKER_CONTAINER_IMAGE):$(dockerContainerTag)"
                          }
                        ]
                      }
                    }
                  }
                }
              kubernetesServiceConnection: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"

          - task: 'Kubernetes@1'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"
              command: 'rollout'
              arguments: "restart deployment/$(K8S_DEPLOYMENT_NAME)"
