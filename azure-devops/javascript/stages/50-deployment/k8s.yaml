stages:
  - stage: 'deployment'
    displayName: 'deployment'
    condition: and(not(failed()), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/')))
    dependsOn: 'delivery'
    jobs:
      - job: 'deployment'
        displayName: 'deployment'
        steps:
          - task: 'KubernetesManifest@1'
            inputs:
              action: 'createSecret'
              secretType: 'dockerRegistry'
              secretName: "$(K8S_IMAGE_PULL_SECRET_NAME)"
              dockerRegistryEndpoint: "$(CONTAINER_REGISTRY_SERVICE_CONNECTION)"
              kubernetesServiceConnection: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"

          - template: '../../abstracts/replace-environment-variables.yaml'
            parameters:
              FILE: '.ci/40-delivery/config/opensearch_dashboards.yml'
              DISPLAY_NAME: 'Replace Environment Variables'

          - task: 'Kubernetes@1'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              configMapName: "$(K8S_CONFIGMAP_NAME)"
              forceUpdateConfigMap: true
              configMapArguments: '--from-file=.ci/40-delivery/config/opensearch_dashboards.yml'
              kubernetesServiceEndpoint: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"

          - script: |
              set -e

              echo "##vso[task.setvariable variable=BUILD_REPOSITORY_NAME;isOutput=true]$(Build.Repository.Name)"
              CONTAINER_TAG=$[stageDependencies.delivery.delivery.outputs['build.DOCKER_CONTAINER_TAG']]
              echo "##vso[task.setvariable variable=DOCKER_CONTAINER_TAG;isOutput=true]$CONTAINER_TAG"

          - template: '../../abstracts/replace-environment-variables.yaml'
            parameters:
              FILE: '$(Build.SourcesDirectory)/kubernetes/k8s-patch.json'
              DISPLAY_NAME: 'Replace Environment Variables (Kubernetes file)'

          - script: |
              cat "$(Build.SourcesDirectory)/kubernetes/k8s-patch.json"

          - task: Kubernetes@1
            displayName: 'Patch Deployment Using JSON Patch File'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"
              command: 'patch'
              arguments: >
                deployment $(K8S_DEPLOYMENT_NAME) --patch-file "$(Build.SourcesDirectory)/kubernetes/k8s-patch.json"

          - task: 'Kubernetes@1'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: "$(K8S_ENDPOINT)"
              namespace: "$(K8S_NAMESPACE)"
              command: 'rollout'
              arguments: "restart deployment/$(K8S_DEPLOYMENT_NAME)"
